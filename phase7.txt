[
  {
    "path": "src/app/blog/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { getPaginatedPosts, getAllCategories, getAllTags } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport BlogSearch from '@/components/Blog/BlogSearch';\nimport Pagination from '@/components/Blog/Pagination';\nimport { generateBlogSchema, generateBlogListSchema } from '@/lib/generateSchemas';\nimport Link from 'next/link';\nimport StickyBottomNav from '@/components/ui/StickyBottomNav';\nimport GlassCard from '@/components/ui/GlassCard';\n\nexport const metadata: Metadata = {\n  title: 'Nail Care Blog - Expert Tips, Trends & Tutorials | Mirelle',\n  description: 'Discover 100+ expert nail care articles, seasonal trends, step-by-step tutorials, and professional manicure tips. Your ultimate guide to beautiful, healthy nails.',\n  keywords: 'nail care blog, nail tips 2025, nail trends, nail art tutorials, manicure tips, nail health, professional nail care, seasonal nail designs, nail inspiration, beauty blog',\n  authors: [{ name: 'Mirelle' }],\n  creator: 'Mirelle',\n  publisher: 'Mirelle',\n  alternates: {\n    canonical: 'https://mirelleinspo.com/blog',\n  },\n  robots: {\n    index: true,\n    follow: true,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n  openGraph: {\n    title: 'Nail Care Blog - Expert Tips, Trends & Tutorials | Mirelle',\n    description: 'Discover expert nail care articles, seasonal trends, and step-by-step tutorials. Your ultimate guide to beautiful, healthy nails.',\n    type: 'website',\n    url: 'https://mirelleinspo.com/blog',\n    siteName: 'Mirelle',\n    locale: 'en_US',\n    images: [{\n      url: 'https://mirelleinspo.com/blog-hero.jpg',\n      width: 1200,\n      height: 630,\n      alt: 'Mirelle Nail Care Blog',\n      type: 'image/jpeg',\n    }],\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Nail Care Blog | Mirelle',\n    description: 'Expert nail care articles, trends & tutorials',\n    images: ['https://mirelleinspo.com/blog-hero.jpg'],\n    creator: '@mirelleinspo',\n    site: '@mirelleinspo',\n  },\n};\n\ninterface PageProps {\n  searchParams: {\n    page?: string;\n  };\n}\n\nexport default async function BlogPage({ searchParams }: PageProps) {\n  const currentPage = Number(searchParams.page) || 1;\n  const { posts, totalPages, totalPosts } = await getPaginatedPosts(currentPage, 12);\n  \n  const categories = await getAllCategories();\n  const tags = await getAllTags();\n  \n  const baseUrl = 'https://mirelleinspo.com';\n\n  const blogSchema = generateBlogSchema();\n  const itemListSchema = generateBlogListSchema(posts);\n\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n    ],\n  };\n\n  return (\n    <>\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(blogSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(itemListSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n\n      <div className=\"min-h-screen thumb-zone\">\n        {/* Hero Section with Animated Gradient */}\n        <section className=\"relative bg-gradient-to-r from-pink-200 via-purple-200 to-indigo-200 py-20 overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-pink-300/30 via-transparent to-purple-300/30 animate-pulse\"></div>\n          <div className=\"container mx-auto px-4 text-center relative z-10\">\n            <h1 className=\"text-5xl font-bold text-gray-800 mb-4 animate-fade-in\">\n              Nail Care Blog - Expert Tips & Trends\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto animate-fade-in\" style={{ animationDelay: '100ms' }}>\n              Discover professional nail care advice, seasonal trends, and step-by-step tutorials for beautiful, healthy nails\n            </p>\n            \n            <div className=\"flex flex-wrap justify-center gap-6 mt-8\">\n              <div className=\"flex items-center gap-2 text-gray-700 animate-fade-in\" style={{ animationDelay: '200ms' }}>\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">{totalPosts}+ Articles</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-gray-700 animate-fade-in\" style={{ animationDelay: '300ms' }}>\n                <span className=\"text-2xl\">\u2728</span>\n                <span className=\"font-semibold\">Expert Advice</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-gray-700 animate-fade-in\" style={{ animationDelay: '400ms' }}>\n                <span className=\"text-2xl\">\ud83d\udcc6</span>\n                <span className=\"font-semibold\">Updated Weekly</span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Search Section */}\n        <section className=\"bg-white py-8 border-b\">\n          <div className=\"container mx-auto px-4\">\n            <BlogSearch posts={posts} /> \n          </div>\n        </section>\n\n        {/* Main Content with Sidebar */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n              {/* Sidebar with Categories and Tags */}\n              <aside className=\"lg:col-span-1 space-y-8\">\n                {/* Popular Tags */}\n                <div className=\"bg-gray-50 rounded-lg p-6\">\n                  <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Popular Tags</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {tags.slice(0, 15).map((tag) => (\n                      <Link\n                        key={tag.slug}\n                        href={`/blog/tag/${tag.slug}`}\n                        className=\"text-sm bg-white text-gray-700 px-3 py-1 rounded-full hover:bg-pink-100 transition-colors\"\n                      >\n                        {tag.name} ({tag.count})\n                      </Link>\n                    ))}\n                  </div>\n                </div>\n              </aside>\n\n              {/* Blog Grid */}\n              <div className=\"lg:col-span-3\">\n                <div className=\"mb-8\">\n                  <h2 className=\"text-3xl font-bold text-gray-800 mb-2\">\n                    Latest Articles\n                  </h2>\n                  <p className=\"text-gray-600\">\n                    Page {currentPage} of {totalPages} \u2022 {totalPosts} total articles\n                  </p>\n                </div>\n\n                {posts.length > 0 ? (\n                  <>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                      {posts.map((post, index) => (\n                        <>\n                          <BlogCard key={post.slug} post={post} />\n                          \n                          {/* Inline Newsletter CTA after 3rd card */}\n                          {index === 2 && currentPage === 1 && (\n                            <GlassCard className=\"flex flex-col justify-center items-center text-center col-span-1 md:col-span-2 xl:col-span-3 my-4 bg-gradient-to-br from-pink-50 to-purple-50\">\n                              <h3 className=\"text-2xl font-bold text-gray-800 mb-3\">\n                                \ud83d\udc85 Get Weekly Nail Inspo\n                              </h3>\n                              <p className=\"text-gray-600 mb-4 max-w-md\">\n                                Join 10,000+ nail enthusiasts! Get trending designs, expert tips, and exclusive finds delivered weekly.\n                              </p>\n                              <div className=\"flex flex-col sm:flex-row gap-3 w-full max-w-md\">\n                                <input\n                                  type=\"email\"\n                                  placeholder=\"Your email address\"\n                                  className=\"flex-1 px-4 py-3 rounded-lg border border-gray-300 focus:border-pink-400 focus:ring-2 focus:ring-pink-200 outline-none transition-all\"\n                                />\n                                <button className=\"px-6 py-3 bg-gradient-to-r from-pink-500 to-purple-500 text-white font-semibold rounded-lg hover:shadow-lg transition-all duration-300 transform hover:scale-105\">\n                                  Subscribe\n                                </button>\n                              </div>\n                              <p className=\"text-xs text-gray-500 mt-3\">\n                                \u2713 Trending designs \u2713 Expert tips \u2713 No spam ever\n                              </p>\n                            </GlassCard>\n                          )}\n                        </>\n                      ))}\n                    </div>\n\n                    {/* Pagination Component */}\n                    {totalPages > 1 && (\n                      <Pagination\n                        currentPage={currentPage}\n                        totalPages={totalPages}\n                        baseUrl=\"/blog\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <div className=\"text-center py-16\">\n                    <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                      Amazing Content Coming Soon\n                    </h3>\n                    <p className=\"text-gray-500\">\n                      We're crafting expert nail care content for you. Check back soon!\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Sticky Bottom Nav for Mobile */}\n        <StickyBottomNav />\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/[slug]/page.tsx",
    "content": "import { notFound } from 'next/navigation';\nimport { getBlogPost, getAllBlogSlugs } from '@/lib/blog';\nimport BlogPost from '@/components/Blog/BlogPost';\nimport Breadcrumbs from '@/components/Breadcrumbs';\nimport RelatedPosts from '@/components/Blog/RelatedPosts';\nimport type { Metadata } from 'next';\nimport { generateSchemas } from '@/lib/generateSchemas';\n\ninterface PageProps {\n  params: {\n    slug: string;\n  };\n}\n\n// \u2705 ISR: Revalidate every hour\nexport const revalidate = 3600;\n\nexport async function generateStaticParams() {\n  const slugs = await getAllBlogSlugs();\n  return slugs.map((slug) => ({\n    slug: slug,\n  }));\n}\n\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { slug } = params;\n  const post = await getBlogPost(slug);\n  \n  if (!post) {\n    return {\n      title: 'Post Not Found - Mirelle',\n      description: 'The blog post you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  // \ud83d\udd04 UPDATED: Use canonical from post if exists, otherwise construct\n  const canonicalUrl = post.canonical || `https://mirelleinspo.com/blog/${slug}`;\n  const imageUrl = post.image ? `https://mirelleinspo.com${post.image}` : 'https://mirelleinspo.com/og-default.png';\n  const imageAltText = post.imageAlt || post.title;\n  \n  // \ud83d\udd04 UPDATED: Better keywords handling\n  const keywords = post.tags?.length \n    ? post.tags.join(', ')\n    : 'nail art, nail care, nail trends, manicure tips, nail design';\n  \n  return {\n    title: `${post.title} | Mirelle`,\n    description: post.excerpt || `Discover ${post.title} - expert nail tips, trends, and tutorials from Mirelle.`,\n    keywords,\n    authors: [{ name: post.author || 'Mirelle' }],\n    creator: post.author || 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${post.title} | Mirelle`,\n      description: post.excerpt || `Discover ${post.title} - expert nail inspiration from Mirelle.`,\n      type: 'article',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: imageUrl,\n        width: post.imageWidth || 1200,\n        height: post.imageHeight || 630,\n        alt: imageAltText,\n        type: 'image/jpeg',\n      }],\n      publishedTime: post.date,\n      modifiedTime: post.dateModified || post.updatedDate || post.date,\n      authors: [post.author || 'Mirelle'],\n      section: post.category || 'Nail Care',\n      tags: post.tags || [],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${post.title} | Mirelle`,\n      description: post.excerpt || `Discover ${post.title} - expert nail inspiration from Mirelle.`,\n      images: [imageUrl],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n    other: {\n      'article:published_time': post.date,\n      'article:modified_time': post.dateModified || post.updatedDate || post.date,\n      'article:author': post.author || 'Mirelle',\n      'article:section': post.category || 'Nail Care',\n      'article:tag': post.tags?.join(', ') || '',\n      // \u2705 NEW: Add word count if available\n      ...(post.wordCount && { 'article:word_count': post.wordCount.toString() }),\n    },\n  };\n}\n\nexport default async function BlogPostPage({ params }: PageProps) {\n  const { slug } = params;\n  const post = await getBlogPost(slug);\n  \n  if (!post) notFound();\n\n  // \u2705 UPDATED: Generate schemas with all available data\n  const schemas = generateSchemas({\n    post,\n    slug: params.slug,\n    faqItems: post.faqItems,\n    tutorialSteps: post.tutorialSteps,\n    tutorialMetadata: post.tutorialMetadata,\n    videoMetadata: post.videoMetadata,\n    galleryImages: post.galleryImages,\n    // Note: rating removed for safety - add only when you have real reviews\n  });\n\n  return (\n    <>\n      {/* Core Structured Data - Always Present */}\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.articleSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.breadcrumbSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.websiteSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.organizationSchema) }} \n      />\n      \n      {/* Conditional Structured Data - Only When Data Exists */}\n      {schemas.faqSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.faqSchema) }} \n        />\n      )}\n      {schemas.howToSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.howToSchema) }} \n        />\n      )}\n      {schemas.videoSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.videoSchema) }} \n        />\n      )}\n      {schemas.imageGallerySchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.imageGallerySchema) }} \n        />\n      )}\n      \n      {/* Breadcrumbs */}\n      <Breadcrumbs \n        items={[{ label: 'Blog', href: '/blog' }]} \n        currentPage={post.title} \n      />\n      \n      {/* Main Blog Post Content */}\n      <BlogPost post={post} />\n\n      {/* Related Posts Section */}\n      <section className=\"bg-gray-50 py-12\">\n        <div className=\"container mx-auto px-4\">\n          <RelatedPosts currentSlug={slug} />\n        </div>\n      </section>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/tag/[tag]/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getPostsByTag, getAllTags } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport Breadcrumbs from '@/components/Breadcrumbs';\n\ninterface PageProps {\n  params: {\n    tag: string;\n  };\n  searchParams: {\n    page?: string;\n  };\n}\n\n\n// \ud83d\udfe2 CHANGED - Enable ISR with 1 hour revalidation\nexport const revalidate = 3600; // Revalidate every hour\n\n// \ud83d\udfe2 CHANGED - Remove dynamic export (causing conflict with generateStaticParams)\n// export const dynamic = 'force-static';\n\nexport async function generateStaticParams() {\n  // const slugs = await getAllBlogSlugs();\n  const tags = await getAllTags();\n  return tags.map((slug) => ({\n    slug: slug,\n  }));\n}\n\n\n// \u2705 NEW - Generate metadata for tag pages\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { tag } = params;\n  const posts = await getPostsByTag(tag);\n  const tags = await getAllTags();\n  const tagData = tags.find(t => t.slug === tag);\n\n  if (!tagData || posts.length === 0) {\n    return {\n      title: 'Tag Not Found - Mirelle',\n      description: 'The tag you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/tag/${tag}`;\n  const tagName = tagData.name;\n  \n  return {\n    title: `${tagName} - Nail Care Articles | Mirelle`,\n    description: `Discover ${posts.length} expert articles tagged with ${tagName}. Professional nail care tips, trends, and tutorials curated by Mirelle.`,\n    keywords: `${tagName}, nail care, nail art, nail trends, ${tagName.toLowerCase()}, manicure, beauty blog`,\n    authors: [{ name: 'Mirelle' }],\n    creator: 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${tagName} - Nail Care Articles | Mirelle`,\n      description: `Discover ${posts.length} expert articles tagged with ${tagName}`,\n      type: 'website',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: 'https://mirelleinspo.com/blog-tag.jpg',\n        width: 1200,\n        height: 630,\n        alt: `${tagName} articles on Mirelle`,\n        type: 'image/jpeg',\n      }],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${tagName} Articles | Mirelle`,\n      description: `Discover expert ${tagName} articles`,\n      images: ['https://mirelleinspo.com/blog-tag.jpg'],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n  };\n}\n\nexport default async function TagPage({ params, searchParams }: PageProps) {\n  const { tag } = params;\n  const currentPage = Number(searchParams.page) || 1;\n  const postsPerPage = 12;\n\n  const allPosts = await getPostsByTag(tag);\n  const tags = await getAllTags();\n  const tagData = tags.find(t => t.slug === tag);\n\n  if (!tagData || allPosts.length === 0) {\n    notFound();\n  }\n\n  // Calculate pagination\n  const totalPages = Math.ceil(allPosts.length / postsPerPage);\n  const startIndex = (currentPage - 1) * postsPerPage;\n  const endIndex = startIndex + postsPerPage;\n  const paginatedPosts = allPosts.slice(startIndex, endIndex);\n\n  // \u2705 NEW - Breadcrumb structured data\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n      {\n        '@type': 'ListItem',\n        position: 3,\n        name: `#${tagData.name}`,\n        item: `https://mirelleinspo.com/blog/tag/${tag}`,\n      },\n    ],\n  };\n\n  // \u2705 NEW - Collection page structured data\n  const collectionSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'CollectionPage',\n    name: `${tagData.name} Articles`,\n    description: `Collection of ${allPosts.length} articles tagged with ${tagData.name}`,\n    url: `https://mirelleinspo.com/blog/tag/${tag}`,\n    about: {\n      '@type': 'Thing',\n      name: tagData.name,\n    },\n    numberOfItems: allPosts.length,\n  };\n\n  return (\n    <>\n      {/* Structured Data */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(collectionSchema) }}\n      />\n\n      <div className=\"min-h-screen\">\n        {/* Breadcrumbs */}\n        <Breadcrumbs \n          items={[{ label: 'Blog', href: '/blog' }]} \n          currentPage={`#${tagData.name}`}\n        />\n\n        {/* Hero Section */}\n        <section className=\"relative bg-gradient-to-r from-purple-200 to-pink-200 py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <div className=\"inline-block bg-white px-6 py-3 rounded-full mb-4 shadow-md\">\n                <span className=\"text-3xl font-bold text-gray-800\">#{tagData.name}</span>\n              </div>\n              <p className=\"text-xl text-gray-600 mb-6\">\n                Explore articles tagged with <strong>{tagData.name}</strong>\n              </p>\n              <div className=\"flex items-center justify-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">\n                  {allPosts.length} {allPosts.length === 1 ? 'Article' : 'Articles'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Posts Grid */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            {paginatedPosts.length > 0 ? (\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n                  {paginatedPosts.map((post) => (\n                    <BlogCard key={post.slug} post={post} />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center gap-2 mt-12\">\n                    {/* Previous Button */}\n                    {currentPage > 1 && (\n                      <a\n                        href={`/blog/tag/${tag}?page=${currentPage - 1}`}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                      >\n                        \u2190 Previous\n                      </a>\n                    )}\n\n                    {/* Page Numbers */}\n                    <div className=\"flex gap-2\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                        <a\n                          key={page}\n                          href={`/blog/tag/${tag}?page=${page}`}\n                          className={`px-4 py-2 rounded-lg transition-colors ${\n                            page === currentPage\n                              ? 'bg-purple-600 text-white'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          }`}\n                        >\n                          {page}\n                        </a>\n                      ))}\n                    </div>\n\n                    {/* Next Button */}\n                    {currentPage < totalPages && (\n                      <a\n                        href={`/blog/tag/${tag}?page=${currentPage + 1}`}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                      >\n                        Next \u2192\n                      </a>\n                    )}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-16\">\n                <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                  No articles found with this tag\n                </h3>\n                <a\n                  href=\"/blog\"\n                  className=\"text-purple-600 hover:text-purple-700 underline\"\n                >\n                  \u2190 Back to all articles\n                </a>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Popular Tags Section */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800\">\n              Explore Other Tags\n            </h2>\n            <div className=\"flex flex-wrap justify-center gap-3 max-w-5xl mx-auto\">\n              {tags\n                .filter(t => t.slug !== tag)\n                .slice(0, 20)\n                .map((t) => (\n                  <a\n                    key={t.slug}\n                    href={`/blog/tag/${t.slug}`}\n                    className=\"bg-white px-4 py-2 rounded-full text-sm font-medium text-gray-700 hover:bg-purple-100 hover:text-purple-700 transition-colors border border-gray-200 hover:border-purple-300\"\n                  >\n                    #{t.name} ({t.count})\n                  </a>\n                ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/category/[category]/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getPostsByCategory, getAllCategories } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport Breadcrumbs from '@/components/Breadcrumbs';\n\ninterface PageProps {\n  params: {\n    category: string;\n  };\n  searchParams: {\n    page?: string;\n  };\n}\n\n\n// \u2705 NEW - Enable ISR with 1 hour revalidation\nexport const revalidate = 3600;\n\n// \u2705 NEW - Enable static generation\n// export const dynamic = 'force-static';\n\n// \u2705 Generate static params for all categories\nexport async function generateStaticParams() {\n  const categories = await getAllCategories();\n  return categories.map((category) => ({\n    category: category.slug,\n  }));\n}\n\n// \u2705 Generate metadata for category pages\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { category } = params;\n  const posts = await getPostsByCategory(category);\n  const categories = await getAllCategories();\n  const categoryData = categories.find(cat => cat.slug === category); // \u2705 FIXED: Changed from cat.slug to cat.name\n\n  if (!categoryData || posts.length === 0) {\n    return {\n      title: 'Category Not Found - Mirelle',\n      description: 'The category you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/category/${category}`;\n  \n  return {\n    title: `${categoryData.name} - Nail Care Articles | Mirelle`,\n    description: `Explore ${posts.length} expert articles about ${categoryData.name}. Professional nail care tips, trends, and tutorials curated by Mirelle.`, // \u2705 FIXED: Removed categoryData.excerpt\n    keywords: `${categoryData.name}, nail care, nail art, nail trends, ${categoryData.name.toLowerCase()} tips, manicure, beauty blog`,\n    authors: [{ name: 'Mirelle' }],\n    creator: 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${categoryData.name} - Nail Care Articles | Mirelle`,\n      description: `Explore ${posts.length} expert articles about ${categoryData.name}`, // \u2705 FIXED: Removed categoryData.excerpt\n      type: 'website',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: 'https://mirelleinspo.com/blog-category.jpg',\n        width: 1200,\n        height: 630,\n        alt: `${categoryData.name} articles on Mirelle`,\n        type: 'image/jpeg',\n      }],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${categoryData.name} Articles | Mirelle`,\n      description: `Explore expert ${categoryData.name} articles`, // \u2705 FIXED: Removed categoryData.excerpt\n      images: ['https://mirelleinspo.com/blog-category.jpg'],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n  };\n}\n\nexport default async function CategoryPage({ params, searchParams }: PageProps) {\n  const { category } = params;\n  const currentPage = Number(searchParams.page) || 1;\n  const postsPerPage = 12;\n\n  // Get all posts in this category\n  const allPosts = await getPostsByCategory(category);\n  const categories = await getAllCategories();\n  const categoryData = categories.find(cat => cat.slug === category); // \u2705 FIXED: Changed from cat.slug to cat.name\n\n  if (!categoryData || allPosts.length === 0) {\n    notFound();\n  }\n\n  // Calculate pagination\n  const totalPages = Math.ceil(allPosts.length / postsPerPage);\n  const startIndex = (currentPage - 1) * postsPerPage;\n  const endIndex = startIndex + postsPerPage;\n  const paginatedPosts = allPosts.slice(startIndex, endIndex);\n\n  // \u2705 Breadcrumb structured data\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n      {\n        '@type': 'ListItem',\n        position: 3,\n        name: categoryData.name,\n        item: `https://mirelleinspo.com/blog/category/${category}`,\n      },\n    ],\n  };\n\n  // \u2705 Collection page structured data\n  const collectionSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'CollectionPage',\n    name: `${categoryData.name} Articles`,\n    description: `Collection of ${allPosts.length} articles about ${categoryData.name}`, // \u2705 FIXED: Removed categoryData.excerpt\n    url: `https://mirelleinspo.com/blog/category/${category}`,\n    about: {\n      '@type': 'Thing',\n      name: categoryData.name,\n    },\n    numberOfItems: allPosts.length,\n  };\n\n  return (\n    <>\n      {/* Structured Data */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(collectionSchema) }}\n      />\n\n      <div className=\"min-h-screen\">\n        {/* Breadcrumbs */}\n        <Breadcrumbs \n          items={[{ label: 'Blog', href: '/blog' }]} \n          currentPage={categoryData.name}\n        />\n\n        {/* Hero Section */}\n        <section className=\"relative bg-gradient-to-r from-pink-200 to-purple-200 py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h1 className=\"text-4xl md:text-5xl font-bold text-gray-800 mb-4\">\n                {categoryData.name}\n              </h1>\n              <p className=\"text-xl text-gray-600 mb-6\">\n                {/* \u2705 FIXED: Removed conditional rendering since excerpt doesn't exist */}\n                Discover expert articles and insights about {categoryData.name}\n              </p>\n              <div className=\"flex items-center justify-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">\n                  {allPosts.length} {allPosts.length === 1 ? 'Article' : 'Articles'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Posts Grid */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            {paginatedPosts.length > 0 ? (\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n                  {paginatedPosts.map((post) => (\n                    <BlogCard key={post.slug} post={post} />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center gap-2 mt-12\">\n                    {/* Previous Button */}\n                    {currentPage > 1 && (\n                      <a\n                        href={`/blog/category/${category}?page=${currentPage - 1}`}\n                        className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors\"\n                      >\n                        \u2190 Previous\n                      </a>\n                    )}\n\n                    {/* Page Numbers */}\n                    <div className=\"flex gap-2\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                        <a\n                          key={page}\n                          href={`/blog/category/${category}?page=${page}`}\n                          className={`px-4 py-2 rounded-lg transition-colors ${\n                            page === currentPage\n                              ? 'bg-pink-600 text-white'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          }`}\n                        >\n                          {page}\n                        </a>\n                      ))}\n                    </div>\n\n                    {/* Next Button */}\n                    {currentPage < totalPages && (\n                      <a\n                        href={`/blog/category/${category}?page=${currentPage + 1}`}\n                        className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors\"\n                      >\n                        Next \u2192\n                      </a>\n                    )}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-16\">\n                <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                  No articles found in this category\n                </h3>\n                <a\n                  href=\"/blog\"\n                  className=\"text-pink-600 hover:text-pink-700 underline\"\n                >\n                  \u2190 Back to all articles\n                </a>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Other Categories Section */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800\">\n              Explore Other Categories\n            </h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 max-w-5xl mx-auto\">\n              {categories\n                .filter(cat => cat.name !== category) // \u2705 FIXED: Changed from cat.slug to cat.name\n                .map((cat) => (\n                  <a\n                    key={cat.name} // \u2705 FIXED: Changed from cat.slug to cat.name\n                    href={`/blog/category/${cat.name}`} // \u2705 FIXED: Changed from cat.slug to cat.name\n                    className=\"bg-white p-6 rounded-lg text-center hover:shadow-lg transition-shadow border border-gray-100 hover:border-pink-300\"\n                  >\n                    <h3 className=\"font-semibold text-gray-800 mb-2\">{cat.name}</h3>\n                    <span className=\"text-sm text-gray-600\">\n                      {cat.count} {cat.count === 1 ? 'article' : 'articles'}\n                    </span>\n                  </a>\n                ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/lib/blog.ts",
    "content": "import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport { BlogPost, BlogMetadata } from '@/types/blog';\nimport { marked } from 'marked';\n\nmarked.setOptions({\n  breaks: true,\n  gfm: true,\n});\n\nconst BLOG_DIRECTORY = path.join(process.cwd(), 'src/content/blogs');\nconst METADATA_DIRECTORY = path.join(process.cwd(), 'src/content/metadata');\n\n// \u2705 NEW - In-memory cache for metadata\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\nclass MetadataCache {\n  private cache = new Map<string, CacheEntry<any>>();\n  private readonly TTL = 3600000; // 1 hour in milliseconds\n\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    // Check if cache is expired\n    if (Date.now() - entry.timestamp > this.TTL) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data as T;\n  }\n\n  set<T>(key: string, data: T): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  // Get cache statistics\n  getStats() {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n}\n\n// \u2705 NEW - Global cache instance\nconst metadataCache = new MetadataCache();\n\n// \u2705 NEW - Helper to load metadata files with caching\nfunction loadMetadataFile<T>(filename: string): T {\n  const cacheKey = `metadata:${filename}`;\n  \n  // Try to get from cache first\n  const cached = metadataCache.get<T>(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  // Load from file system\n  try {\n    const filePath = path.join(METADATA_DIRECTORY, filename);\n    const content = fs.readFileSync(filePath, 'utf8');\n    const data = JSON.parse(content) as T;\n    \n    // Store in cache\n    metadataCache.set(cacheKey, data);\n    \n    return data;\n  } catch (error) {\n    console.error(`Error loading metadata file ${filename}:`, error);\n    return {} as T;\n  }\n}\n\n// \u2705 NEW - Get metadata from JSON files\nfunction getMetadataFromJSON(slug: string): Partial<BlogMetadata> {\n  try {\n    const titles = loadMetadataFile<Record<string, string>>('titles.json');\n    const excerpts = loadMetadataFile<Record<string, string>>('excerpts.json');\n    const tags = loadMetadataFile<Record<string, string[]>>('tags.json');\n    const images = loadMetadataFile<Record<string, string>>('images.json');\n    const imageAlts = loadMetadataFile<Record<string, string>>('imageAlts.json');\n    const dateModified = loadMetadataFile<Record<string, string>>('dateModified.json');\n    const tldrs = loadMetadataFile<Record<string, { summary: string[]; keyTakeaways?: string[] }>>('tldr.json');\n    const faqs = loadMetadataFile<Record<string, any[]>>('faqItems.json');\n\n    return {\n      title: titles[slug] || undefined,           // \u2705 Return undefined if not found\n      excerpt: excerpts[slug] || undefined,\n      tags: tags[slug] || undefined,\n      image: images[slug] || undefined,\n      imageAlt: imageAlts[slug] || undefined,\n      dateModified: dateModified[slug] || undefined,\n      tldr: tldrs[slug] || undefined,            // \u2705 This will be undefined if not in JSON\n      faqItems: faqs[slug] || undefined,         // \u2705 This will be undefined if not in JSON\n    };\n  } catch (error) {\n    console.error(`Error getting metadata for ${slug}:`, error);\n    return {};\n  }\n}\n\n// \u2705 NEW - Get core metadata from frontmatter\nfunction getMetadataFromFrontmatter(slug: string): Partial<BlogMetadata> {\n  try {\n    const filePath = path.join(BLOG_DIRECTORY, `${slug}.md`);\n    const content = fs.readFileSync(filePath, 'utf8');\n    const { data } = matter(content);\n    \n    return {\n      date: data.date,\n      author: data.author,\n      readTime: data.readTime,\n      category: data.category,\n      canonical: data.canonical || `https://mirelleinspo.com/blog/${slug}`,\n\n    };\n  } catch (error) {\n    console.error(`Error reading frontmatter for ${slug}:`, error);\n    return {};\n  }\n}\n\n// \ud83d\udd04 UPDATED - getAllBlogPosts with caching\nexport async function getAllBlogPosts(): Promise<BlogMetadata[]> {\n  const cacheKey = 'all-blog-posts';\n  \n  // Try cache first\n  const cached = metadataCache.get<BlogMetadata[]>(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  try {\n    const files = fs.readdirSync(BLOG_DIRECTORY);\n    const posts = files\n      .filter(file => file.endsWith('.md'))\n      .map(file => {\n        const slug = file.replace('.md', '');\n        \n        // \u2705 NEW - Merge JSON metadata with frontmatter\n        const jsonMetadata = getMetadataFromJSON(slug);\n        const frontmatterMetadata = getMetadataFromFrontmatter(slug);\n        \n        return {\n          slug,\n          title: jsonMetadata.title || 'Untitled',\n          excerpt: jsonMetadata.excerpt || '',\n          date: frontmatterMetadata.date || new Date().toISOString(),\n          author: frontmatterMetadata.author || 'Anonymous',\n          tags: jsonMetadata.tags || [],\n          image: jsonMetadata.image || null,\n          imageAlt: jsonMetadata.imageAlt,\n          readTime: frontmatterMetadata.readTime || '5 min',\n          category: frontmatterMetadata.category,\n          canonical: frontmatterMetadata.canonical || `https://mirelleinspo.com/blog/${slug}`,\n          dateModified: jsonMetadata.dateModified,\n          tldr: jsonMetadata.tldr,\n          faqItems: jsonMetadata.faqItems,\n        } as BlogMetadata;\n      })\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    \n    // Store in cache\n    metadataCache.set(cacheKey, posts);\n    \n    return posts;\n  } catch (error) {\n    console.error('Error reading blog posts:', error);\n    return [];\n  }\n}\n\n// \ud83d\udd04 UPDATED - getBlogPost with caching\nexport async function getBlogPost(slug: string): Promise<BlogPost | null> {\n  const cacheKey = `blog-post:${slug}`;\n  \n  // Try cache first\n  const cached = metadataCache.get<BlogPost>(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  try {\n    const filePath = path.join(BLOG_DIRECTORY, `${slug}.md`);\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    const { data, content: markdownContent } = matter(fileContent);\n    \n    // Convert markdown to HTML\n    let htmlContent = await marked(markdownContent);\n    \n    // Add IDs to H2 headings using regex\n    htmlContent = htmlContent.replace(\n      /<h2>(.*?)<\\/h2>/g,\n      (match, text) => {\n        const cleanText = text.replace(/<[^>]*>/g, '');\n        const id = cleanText\n          .toLowerCase()\n          .replace(/[^a-z0-9]+/g, '-')\n          .replace(/^-+|-+$/g, '');\n        return `<h2 id=\"${id}\">${text}</h2>`;\n      }\n    );\n    \n    // \u2705 NEW - Merge JSON metadata\n    const jsonMetadata = getMetadataFromJSON(slug);\n    \n    const post: BlogPost = {\n      slug,\n      title: jsonMetadata.title || data.title || 'Untitled',\n      excerpt: jsonMetadata.excerpt || data.excerpt || '',\n      content: htmlContent,\n      date: data.date || new Date().toISOString(),\n      author: data.author || 'Anonymous',\n      tags: jsonMetadata.tags || data.tags || [],\n      image: jsonMetadata.image || data.image || null,\n      imageAlt: jsonMetadata.imageAlt || data.imageAlt,\n      readTime: data.readTime || '5 min',\n      category: data.category,\n      canonical: data.canonical || `https://mirelleinspo.com/blog/${slug}`,\n      dateModified: jsonMetadata.dateModified || data.dateModified,\n      tldr: jsonMetadata.tldr || data.tldr,\n      faqItems: jsonMetadata.faqItems || data.faqItems,\n    };\n    \n    // Store in cache\n    metadataCache.set(cacheKey, post);\n    \n    return post;\n  } catch (error) {\n    console.error(`Error reading blog post ${slug}:`, error);\n    return null;\n  }\n}\n\nexport async function getAllBlogSlugs(): Promise<string[]> {\n  try {\n    const files = fs.readdirSync(BLOG_DIRECTORY);\n    return files\n      .filter(file => file.endsWith('.md'))\n      .map(file => file.replace('.md', ''));\n  } catch (error) {\n    console.error('Error reading blog slugs:', error);\n    return [];\n  }\n}\n\n// \u2705 NEW - Get posts by category with caching\nexport async function getPostsByCategory(category: string): Promise<BlogMetadata[]> {\n  const cacheKey = `category:${category}`;\n  \n  const cached = metadataCache.get<BlogMetadata[]>(cacheKey);\n  if (cached) return cached;\n\n  const allPosts = await getAllBlogPosts();\n  const filtered = allPosts.filter(post => post.category === category);\n  \n  metadataCache.set(cacheKey, filtered);\n  return filtered;\n}\n\n// \u2705 NEW - Get posts by tag with caching\nexport async function getPostsByTag(tag: string): Promise<BlogMetadata[]> {\n  const cacheKey = `tag:${tag}`;\n  \n  const cached = metadataCache.get<BlogMetadata[]>(cacheKey);\n  if (cached) return cached;\n\n  const allPosts = await getAllBlogPosts();\n  const filtered = allPosts.filter(post => \n    post.tags?.some(t => t.toLowerCase() === tag.toLowerCase())\n  );\n  \n  metadataCache.set(cacheKey, filtered);\n  return filtered;\n}\n\n// \u2705 NEW - Get all categories\nexport async function getAllCategories() {\n  const allPosts = await getAllBlogPosts();\n  const categoryMap = new Map<string, number>();\n  \n  allPosts.forEach(post => {\n    if (post.category) {\n      categoryMap.set(post.category, (categoryMap.get(post.category) || 0) + 1);\n    }\n  });\n  \n  return Array.from(categoryMap.entries()).map(([name, count]) => ({\n    name,\n    slug: name.toLowerCase().replace(/\\s+/g, '-'),\n    count,\n  }));\n}\n\n// \u2705 NEW - Get all tags\nexport async function getAllTags() {\n  const allPosts = await getAllBlogPosts();\n  const tagMap = new Map<string, number>();\n  \n  allPosts.forEach(post => {\n    post.tags?.forEach(tag => {\n      tagMap.set(tag, (tagMap.get(tag) || 0) + 1);\n    });\n  });\n  \n  return Array.from(tagMap.entries())\n    .map(([name, count]) => ({\n      name,\n      slug: name.toLowerCase().replace(/\\s+/g, '-'),\n      count,\n    }))\n    .sort((a, b) => b.count - a.count);\n}\n\n// \u2705 NEW - Get related posts\nexport async function getRelatedPosts(currentSlug: string, limit: number = 3): Promise<BlogMetadata[]> {\n  const currentPost = await getBlogPost(currentSlug);\n  if (!currentPost) return [];\n  \n  const allPosts = await getAllBlogPosts();\n  \n  // Score posts by relevance\n  const scoredPosts = allPosts\n    .filter(post => post.slug !== currentSlug)\n    .map(post => {\n      let score = 0;\n      \n      // Same category = +3 points\n      if (post.category === currentPost.category) score += 3;\n      \n      // Shared tags = +1 point per tag\n      const sharedTags = post.tags?.filter(tag => \n        currentPost.tags?.includes(tag)\n      ).length || 0;\n      score += sharedTags;\n      \n      return { post, score };\n    })\n    .filter(item => item.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, limit)\n    .map(item => item.post);\n  \n  return scoredPosts;\n}\n\n// \u2705 NEW - Get paginated posts\nexport async function getPaginatedPosts(page: number = 1, perPage: number = 12): Promise<{\n  posts: BlogMetadata[];\n  totalPages: number;\n  currentPage: number;\n  totalPosts: number;\n}> {\n  const allPosts = await getAllBlogPosts();\n  const totalPosts = allPosts.length;\n  const totalPages = Math.ceil(totalPosts / perPage);\n  const startIndex = (page - 1) * perPage;\n  const endIndex = startIndex + perPage;\n  const posts = allPosts.slice(startIndex, endIndex);\n  \n  return {\n    posts,\n    totalPages,\n    currentPage: page,\n    totalPosts,\n  };\n}\n\n// \u2705 NEW - Clear cache (useful for development)\nexport function clearBlogCache() {\n  metadataCache.clear();\n}\n\n// \u2705 NEW - Get cache stats (useful for debugging)\nexport function getCacheStats() {\n  return metadataCache.getStats();\n}\n"
  }
]
